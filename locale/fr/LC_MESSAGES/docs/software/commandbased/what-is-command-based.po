# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, FIRST and other WPILib Contributors. This work is licensed under a Creative Commons Attribution 4.0 International License
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Étienne Beaulac <etienne.beaulac@outlook.com>, 2020
# Andre Theberge <atheberge2@videotron.ca>, 2020
# Regis Bekale <rbekale@robotiquefirstquebec.org>, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2022\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-08-30 16:04+0000\n"
"PO-Revision-Date: 2020-04-25 02:02+0000\n"
"Last-Translator: Regis Bekale <rbekale@robotiquefirstquebec.org>, 2022\n"
"Language-Team: French (Canada) (https://www.transifex.com/wpilib/teams/109324/fr_CA/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fr_CA\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % 1000000 == 0 ? 1 : 2;\n"

#: ../../frc-docs/source/docs/software/commandbased/what-is-command-based.rst:2
msgid "What Is \"Command-Based\" Programming?"
msgstr "Qu’est-ce que la programmation « orientée commande » ?"

#: ../../frc-docs/source/docs/software/commandbased/what-is-command-based.rst:4
msgid ""
"WPILib supports a robot programming methodology called \"command-based\" "
"programming. In general, \"command-based\" can refer both the general "
"programming paradigm, and to the set of WPILib library resources included to"
" facilitate it."
msgstr ""
"WPILib supporte une méthodologie de programmation robot appelée "
"programmation « orientée commande. » L'expression « orientée commande » peut"
" faire référence à la fois au paradigme général de programmation et à "
"l'ensemble des fonctionnalités incluses dans WPILib afin de faciliter "
"l'utilisation de ce paradigme. "

#: ../../frc-docs/source/docs/software/commandbased/what-is-command-based.rst:47
msgid "Subsystems and Commands"
msgstr "Sous-systèmes et commandes"

#: ../../frc-docs/source/docs/software/commandbased/what-is-command-based.rstNone
msgid "image of subsystems and commands"
msgstr "image des sous-systèmes et des commandes"

#: ../../frc-docs/source/docs/software/commandbased/what-is-command-based.rst:52
msgid ""
"The command-based pattern is based around two core abstractions: "
"**commands**, and **subsystems.**"
msgstr ""
"Le patron orienté commande repose sur deux abstractions fondamentales : les "
"**commandes** et les **sous-systèmes**."

#: ../../frc-docs/source/docs/software/commandbased/what-is-command-based.rst:59
msgid "How Commands Are Run"
msgstr "L'exécution des commandes"

#: ../../frc-docs/source/docs/software/commandbased/what-is-command-based.rst:61
msgid "For a more detailed explanation, see :doc:`command-scheduler`."
msgstr ""
"Pour une explication plus détaillée, consultez :doc:`command-scheduler`."

#: ../../frc-docs/source/docs/software/commandbased/what-is-command-based.rst:63
msgid ""
"Commands are run by the ``CommandScheduler`` (`Java "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/java/edu/wpi/first/wpilibj2/command/CommandScheduler.html>`__,"
" `C++ "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/cpp/classfrc2_1_1_command_scheduler.html>`__),"
" a singleton class that is at the core of the command-based library. The "
"``CommandScheduler`` is in charge of polling buttons for new commands to "
"schedule, checking the resources required by those commands to avoid "
"conflicts, executing currently-scheduled commands, and removing commands "
"that have finished or been interrupted. The scheduler’s ``run()`` method may"
" be called from any place in the user’s code; it is generally recommended to"
" call it from the ``robotPeriodic()`` method of the ``Robot`` class, which "
"is run at a default frequency of 50Hz (once every 20ms)."
msgstr ""
"Les commandes sont exécutées par le ``CommandScheduler`` (`Java "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/java/edu/wpi/first/wpilibj2/command/CommandScheduler.html>`__,"
" `C++ "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/cpp/classfrc2_1_1_command_scheduler.html>`__),"
" une classe singleton qui est au cœur de la librairie orientée commande. Le "
"``CommandScheduler`` est responsable d'interroger périodiquement l'état des "
"boutons dans le but de planifier les nouvelles commandes, vérifier les "
"ressources requises par ces commandes pour éviter les conflits, exécuter les"
" commandes actuellement planifiées et supprimer les commandes dont "
"l'exécution est terminée ou a été interrompue. La méthode ``run()`` du "
"planificateur peut être appelée de n’importe quel endroit du code de "
"l’utilisateur ; il est généralement recommandé de l’appeler à partir de la "
"méthode ``robotPeriodic()`` de la classe ``Robot``, qui est exécutée à une "
"fréquence par défaut de 50Hz (une fois toutes les 20ms)."

#: ../../frc-docs/source/docs/software/commandbased/what-is-command-based.rst:65
msgid ""
"Multiple commands can run concurrently, as long as they do not require the "
"same resources on the robot. Resource management is handled on a per-"
"subsystem basis: commands may specify which subsystems they interact with, "
"and the scheduler will never schedule more than one command requiring a "
"given subsystem at a time. This ensures that, for example, users will not "
"end up with two different pieces of code attempting to set the same motor "
"controller to different output values. If a new command is scheduled that "
"requires a subsystem that is already in use, it will either interrupt the "
"currently-running command that requires that subsystem (if the command has "
"been scheduled as interruptible), or else it will not be scheduled."
msgstr ""
"Plusieurs commandes peuvent être exécutées simultanément, à condition "
"qu'elles ne nécessitent pas les mêmes ressources. La gestion de ces "
"ressources se fait par sous-système : les commandes peuvent spécifier les "
"sous-systèmes avec lesquels elles interagissent Ainsi, le "
"``CommandScheduler`` n'exécutera jamais en même temps plus d'une commande "
"nécessitant le même sous-système. Cela permet d'éviter, par exemple, que les"
" utilisateurs ne se retrouvent avec deux bouts de code différents essayant "
"de modifier la valeur de sortie du même contrôleur de moteur. Si une "
"nouvelle commande est démarrée et qu'elle a besoin d'un sous-système en "
"cours d'utilisation, le ``CommandScheduler`` interrompra la commande en "
"cours d'exécution qui utilise ce sous-système, si cette commande est "
"interruptible. Si elle ne peut pas être interrompue, alors l'autre commande "
"ne sera pas démarrée."

#: ../../frc-docs/source/docs/software/commandbased/what-is-command-based.rst:67
msgid ""
"Subsystems also can be associated with \"default commands\" that will be "
"automatically scheduled when no other command is currently using the "
"subsystem. This is useful for continuous \"background\" actions such as "
"controlling the robot drive, or keeping an arm held at a setpoint."
msgstr ""
"Chaque sous-système peut également être associé à une \"commande par "
"défaut\" qui est automatiquement démarrée lorsqu'aucune autre commande "
"n'utilise ce sous-système. Cela est utile pour les actions qui s'exécutent "
"continuellement en arrière-plan comme le contrôle de la base pilotable du "
"robot ou le maintien d'un bras articulé à une position fixe."

#: ../../frc-docs/source/docs/software/commandbased/what-is-command-based.rst:69
msgid ""
"When a command is scheduled, its ``initialize()`` method is called once. Its"
" ``execute()`` method is then called once per call to "
"``CommandScheduler.getInstance().run()``. A command is un-scheduled and has "
"its ``end(boolean interrupted)`` method called when either its "
"``isFinished()`` method returns true, or else it is interrupted (either by "
"another command with which it shares a required subsystem, or by being "
"canceled)."
msgstr ""
"Lorsqu'une commande est démarrée, sa méthode ``initialize()`` est appelée "
"une fois. Ensuite, sa méthode ``execute()`` est appelée à chaque fois que la"
" méthode ``CommandScheduler.getInstance().run()`` est appelée. Lorsque la "
"commande arrête de s'exécuter, sa méthode ``end(boolean interrupted)`` est "
"appelée une fois. Cela se produit lorsque sa méthode ``isFinished()`` "
"retourne ``true`` ou lorsqu'elle est interrompue (soit par une commande qui "
"requiert un sous-système qu'elle utilise, soit en étant annulée)."

#: ../../frc-docs/source/docs/software/commandbased/what-is-command-based.rst:72
msgid "Command Groups"
msgstr "Groupes de commandes"

#: ../../frc-docs/source/docs/software/commandbased/what-is-command-based.rst:77
msgid "Creating a Robot Project"
msgstr "Créer un projet robot"

#: ../../frc-docs/source/docs/software/commandbased/what-is-command-based.rst:79
msgid ""
"Creating a project is detailed in :ref:`docs/software/vscode-"
"overview/creating-robot-program:Creating a Robot Program`. Select "
"\"Template\" then your programming language then \"New Command Robot\" to "
"create a basic Command-Based Robot program."
msgstr ""
"La création d'un projet est détaillée dans  :ref:`docs/software/vscode-"
"overview/creating-robot-program:Creating a Robot Program`. Sélectionnez "
"\"Template\" puis votre langage de programmation puis \"New Command Robot\" "
"pour créer un programme de base Command-Based Robot."

# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, FIRST and other WPILib Contributors
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rodrigo Acosta <raar7366@gmail.com>, 2020
# Diana Ramos <dianaracasas@gmail.com>, 2020
# Sofia Fernandez <sofiafdz.val@gmail.com>, 2021
# Austin Shalit <austinshalit@gmail.com>, 2021
# Fernando Soltero <fersg806@gmail.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2021\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-18 04:03+0000\n"
"PO-Revision-Date: 2020-04-25 02:02+0000\n"
"Last-Translator: Fernando Soltero <fersg806@gmail.com>, 2021\n"
"Language-Team: Spanish (Mexico) (https://www.transifex.com/wpilib/teams/109324/es_MX/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_MX\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:2
msgid "Commands"
msgstr "Comandos"

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:4
msgid ""
"Commands are simple state machines that perform high-level robot functions "
"using the methods defined by subsystems. Commands can be either idle, in "
"which they do nothing, or scheduled, in which the scheduler will execute a "
"specific set of the command’s code depending on the state of the command. "
"The ``CommandScheduler`` recognizes scheduled commands as being in one of "
"three states: initializing, executing, or ending. Commands specify what is "
"done in each of these states through the ``initialize()``, ``execute()`` and"
" ``end()`` methods.  Commands are represented in the command-based library "
"by the ``Command`` interface (`Java "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/java/edu/wpi/first/wpilibj2/command/Command.html>`__,"
" `C++ "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/cpp/classfrc2_1_1Command.html>`__)."
msgstr ""
"Los comandos son máquinas de estado simples que realizan funciones de robot "
"de alto nivel utilizando los métodos definidos por los subsistemas. Los "
"comandos pueden estar inactivos, en los que no hacen nada, o programados, en"
" los que el programador ejecutará un conjunto específico del código del "
"comando dependiendo del estado del comando. El ``CommandScheduler`` reconoce"
" los comandos programados como si estuvieran en uno de tres estados: "
"inicializando, ejecutando o finalizando. Los comandos especifican lo que se "
"hace en cada uno de estos estados a través de los métodos ``initialize()``, "
"``execute()`` and ``end()``. Los comandos se representan en la biblioteca "
"basada en comandos mediante la interfaz ``Command``(`Java "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/java/edu/wpi/first/wpilibj2/command/Command.html>`__,"
" `C++ "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/cpp/classfrc2_1_1Command.html>`__)."

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:7
msgid "Creating Commands"
msgstr "Crear comandos"

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:9
msgid ""
"In the C++ API, a `CRTP "
"<https://en.wikipedia.org/wiki/Curiously_recurring_template_pattern>`__ is "
"used to allow certain Command methods to work with the object ownership "
"model.  Users should *always* extend the ``CommandHelper`` `class "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibNewCommands/src/main/native/include/frc2/command/CommandHelper.h>`__"
" when defining their own command classes, as is shown below."
msgstr ""
"En la API de C ++, se utiliza un `CRTP "
"<https://en.wikipedia.org/wiki/Curiously_recurring_template_pattern>` __ "
"para permitir que ciertos métodos de comando funcionen con el modelo de "
"propiedad de objetos. Los usuarios deben * siempre * extender la clase "
"``CommandHelper`` "
"`<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibNewCommands/src/main/native/include/frc2/command/CommandHelper.h>`__"
" cuando definen sus propias clases de comando, como se muestra a "
"continuación."

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:11
msgid ""
"Similarly to subsystems, the recommended method for most users to create a "
"command is to subclass the abstract ``CommandBase`` class (`Java "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/java/edu/wpi/first/wpilibj2/command/CommandBase.html>`__,"
" `C++ "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/cpp/classfrc2_1_1CommandBase.html>`__),"
" as seen in the command-based template (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/templates/commandbased/commands/ExampleCommand.java>`__,"
" `C++ "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/templates/commandbased/include/commands/ExampleCommand.h>`__):"
msgstr ""
"De manera similar a los subsistemas, el método recomendado para que la "
"mayoría de los usuarios creen un comando es subclasificar la clase abstracta"
" ``CommandBase`` (`Java "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/java/edu/wpi/first/wpilibj2/command/CommandBase.html>`"
" __, `C ++ "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/cpp/classfrc2_1_1CommandBase.html>`"
" __), como se ve en la plantilla basada en comandos (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/templates/commandbased/commands/ExampleCommand.java>"
" `__,` C ++ "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/templates/commandbased/include/commands/ExampleCommand.h>"
" `__):"

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:31
msgid ""
"As before, this contains several convenience features. It automatically "
"overrides the ``getRequirements()`` method for users, returning a list of "
"requirements that is empty by default, but can be added to with the "
"``addRequirements()`` method. It also implements the ``Sendable`` interface,"
" and so can be sent to the dashboard - this provides a handy way for "
"scheduling commands for testing (via a button on the dashboard) without "
"needing to bind them to buttons on a controller."
msgstr ""
"Como antes, contiene varias funciones de conveniencia. Anula automáticamente"
" el método ``getRequirements()`` para los usuarios, devolviendo una lista de"
" requisitos que está vacía de forma predeterminada, pero que se puede "
"agregar con el método ``addRequirements()``. También implementa la interfaz "
"``Sendable`` y, por lo tanto, se puede enviar a la dashboard; esto "
"proporciona una forma práctica de programar comandos para pruebas (a través "
"de un botón en la dashboard) sin necesidad de vincularlos a botones de un "
"controlador."

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:34
msgid ""
"Also as before, advanced users seeking more flexibility are free to simply "
"create their own class implementing the ``Command`` interface."
msgstr ""
"Además, como antes, los usuarios avanzados que buscan más flexibilidad son "
"libres de simplemente crear su propia clase implementando la interfaz de "
"``Comando``."

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:37
msgid "The Structure of a Command"
msgstr "La estructura de un comando"

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:39
msgid ""
"While subsystems are fairly freeform, and may generally look like whatever "
"the user wishes them to, commands are quite a bit more constrained. Command "
"code must specify what the command will do in each of its possible states. "
"This is done by overriding the ``initialize()``, ``execute()``, and "
"``end()`` methods. Additionally, a command must be able to tell the "
"scheduler when (if ever) it has finished execution - this is done by "
"overriding the ``isFinished()`` method. All of these methods are defaulted "
"to reduce clutter in user code: ``initialize()``, ``execute()``, and "
"``end()`` are defaulted to simply do nothing, while ``isFinished()`` is "
"defaulted to return false (resulting in a command that never ends)."
msgstr ""
"Si bien los subsistemas son bastante libres y, en general, pueden verse como"
" lo que el usuario desee, los comandos son un poco más restringidos. El "
"código de comando debe especificar qué hará el comando en cada uno de sus "
"posibles estados. Esto se hace anulando los métodos ``initialize()``, "
"``execute()`` y ``end()``. Además, un comando debe poder decirle al "
"programador cuándo (si alguna vez) ha finalizado la ejecución; esto se hace "
"anulando el método ``isFinished()``. Todos estos métodos están "
"predeterminados para reducir el desorden en el código de usuario: "
"``initialize()``, ``execute()`` y ``end()`` están predeterminados para "
"simplemente no hacer nada, mientras que ``isFinished()`` está predeterminado"
" para devolver falso (lo que da como resultado un comando que nunca "
"termina)."

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:42
msgid "Initialization"
msgstr "Inicialización"

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:44
msgid ""
"The ``initialize()`` method (`Java "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/java/edu/wpi/first/wpilibj2/command/Command.html#initialize()>`__,"
" `C++ "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/cpp/classfrc2_1_1Command.html#ad3f1971a1b44ecdd4683d766f831bccd>`__)"
" is run exactly once per time a command is scheduled, as part of the "
"scheduler’s ``schedule()`` method. The scheduler’s ``run()`` method does not"
" need to be called for the ``initialize()`` method to run. The initialize "
"block should be used to place the command in a known starting state for "
"execution. It is also useful for performing tasks that only need to be "
"performed once per time scheduled, such as setting motors to run at a "
"constant speed or setting the state of a solenoid actuator."
msgstr ""
"El método ``initialize()`` (`Java "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/java/edu/wpi/first/wpilibj2/command/Command.html#initialize()>`__,"
" `C++ "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/cpp/classfrc2_1_1Command.html#ad3f1971a1b44ecdd4683d766f831bccd>`__)"
" se ejecuta exactamente una vez que un comando es programado, como parte del"
" método ``schedule()``  del programador de comandos. El método ``run()`` del"
" programador no necesita ser llamado para que el método ``initialize()`` se "
"ejecute. El bloque de inicializar debería ser usado para acomodar el comando"
" en un estado de inicio conocido para su ejecución. También es útil para "
"realizar tareas que solo necesitan ser realizadas una vez por el numero de "
"veces programada, como configurar motores a funcionar a una velocidad "
"constante o establecer el estado de un actuador solenoide."

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:47
msgid "Execution"
msgstr "Ejecución"

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:49
msgid ""
"The ``execute()`` method (`Java "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/java/edu/wpi/first/wpilibj2/command/Command.html#execute()>`__,"
" `C++ "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/cpp/classfrc2_1_1Command.html#a7d7ea1271f7dcc65c0ba3221d179b510>`__)"
" is called repeatedly while the command is scheduled, whenever the "
"scheduler’s ``run()`` method is called (this is generally done in the main "
"robot periodic method, which runs every 20ms by default). The execute block "
"should be used for any task that needs to be done continually while the "
"command is scheduled, such as updating motor outputs to match joystick "
"inputs, or using the output of a control loop."
msgstr ""
"El método ``execute()`` (`Java "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/java/edu/wpi/first/wpilibj2/command/Command.html#execute()>`__,"
" `C++ "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/cpp/classfrc2_1_1Command.html#a7d7ea1271f7dcc65c0ba3221d179b510>`__)"
" se llama repetidamente mientras el comando está programado, siempre que se "
"llama al método ``run()`` del programador (esto generalmente se hace en el "
"método periódico del robot principal, que se ejecuta cada 20 ms por "
"defecto). El bloque de ejecución debe usarse para cualquier tarea que deba "
"realizarse continuamente mientras se programa el comando, como actualizar "
"las salidas del motor para que coincidan con las entradas del joystick o "
"usar la salida de un bucle de control."

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:52
msgid "Ending"
msgstr "Finalizando"

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:54
msgid ""
"The ``end()`` method (`Java "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/java/edu/wpi/first/wpilibj2/command/Command.html#end(boolean)>`__,"
" `C++ "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/cpp/classfrc2_1_1Command.html#a134eda3756f00c667bb5415b23ee920c>`__)"
" is called once when the command ends, whether it finishes normally (i.e. "
"``isFinished()`` returned true) or it was interrupted (either by another "
"command or by being explicitly canceled). The method argument specifies the "
"manner in which the command ended; users can use this to differentiate the "
"behavior of their command end accordingly. The end block should be used to "
"\"wrap up\" command state in a neat way, such as setting motors back to zero"
" or reverting a solenoid actuator to a \"default\" state."
msgstr ""
"El método ``end()`` (`Java "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/java/edu/wpi/first/wpilibj2/command/Command.html#end(boolean)>`__,"
" `C++ "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/cpp/classfrc2_1_1Command.html#a134eda3756f00c667bb5415b23ee920c>`__)"
" se llama una vez cuando finaliza el comando, ya sea que termine normalmente"
" (es decir,  ``isFinished()`` devolvió verdadero) o fue interrumpido (ya sea"
" por otro comando o por ser cancelado explícitamente). El argumento del "
"método especifica la manera en que terminó el comando; los usuarios pueden "
"usar esto para diferenciar el comportamiento de su comando en consecuencia. "
"El bloque final debe usarse para \"concluir\" el estado de comando de una "
"manera ordenada, como volver a poner los motores a cero o revertir un "
"actuador de solenoide a un estado \"predeterminado\"."

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:57
msgid "Specifying end conditions"
msgstr "Especificar condiciones finales"

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:59
msgid ""
"The ``isFinished()`` method (`Java "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/java/edu/wpi/first/wpilibj2/command/Command.html#end(boolean)>`__,"
" `C++ "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/cpp/classfrc2_1_1Command.html#af5e8c12152d195a4f3c06789366aac88>`__)"
" is called repeatedly while the command is scheduled, whenever the "
"scheduler’s ``run()`` method is called. As soon as it returns true, the "
"command’s ``end()`` method is called and it is un-scheduled. The "
"``isFinished()`` method is called *after* the ``execute()`` method, so the "
"command *will* execute once on the same iteration that it is un-scheduled."
msgstr ""
"El método ``isFinished()`` (`Java "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/java/edu/wpi/first/wpilibj2/command/Command.html#end(boolean)>`"
" __, `C ++ "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/cpp/classfrc2_1_1Command.html#af5e8c12152d195a4f3c06789366aac88>`"
" __) se llama repetidamente mientras se programa el comando, siempre que se "
"llama al método ``run()`` del programador. Tan pronto como devuelve "
"verdadero, se llama al método ``end()`` del comando y no está programado. El"
" método ``isFinished()``  se llama *después* del método ``execute ()``, por "
"lo que el comando *se* ejecutará una vez en la misma iteración que no está "
"programado."

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:62
msgid "Simple Command Example"
msgstr "Ejemplo de comando simple"

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:64
msgid ""
"What might a functional command look like in practice? As before, below is a"
" simple command from the HatchBot example project (`Java "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/hatchbottraditional>`__,"
" `C++ "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibcExamples/src/main/cpp/examples/HatchbotTraditional>`__)"
" that uses the ``HatchSubsystem`` introduced in the previous section:"
msgstr ""
"¿Cómo sería un comando funcional en la práctica? Como antes, a continuación "
"se muestra un comando simple del proyecto de ejemplo HatchBot (`Java "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/hatchbottraditional>`"
" __, `C ++ "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibcExamples/src/main/cpp/examples/HatchbotTraditional>`"
" __) que usa el ``HatchSubsystem``  presentado en la sección anterior:"

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:92
msgid ""
"Notice that the hatch subsystem used by the command is passed into the "
"command through the command’s constructor. This is a pattern called "
"`dependency injection "
"<https://en.wikipedia.org/wiki/Dependency_injection>`__, and allows users to"
" avoid declaring their subsystems as global variables. This is widely "
"accepted as a best-practice - the reasoning behind this is discussed in a "
":doc:`later section <structuring-command-based-project>`."
msgstr ""
"Observe que el subsistema hatch utilizado por el comando se pasa al comando "
"a través del constructor del comando. Este es un patrón llamado `inyección "
"de dependencia <https://en.wikipedia.org/wiki/Dependency_injection>` __, y "
"permite a los usuarios evitar declarar sus subsistemas como variables "
"globales. Esto es ampliamente aceptado como una mejor práctica - el "
"razonamiento detrás de esto se discute en: doc: `later section <structuring-"
"command-based-project>`."

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:94
msgid ""
"Notice also that the above command calls the subsystem method once from "
"initialize, and then immediately ends (as ``isFinished()`` simply returns "
"true). This is typical for commands that toggle the states of subsystems, "
"and in fact the command-based library includes code to make :ref:`commands "
"like this <docs/software/commandbased/convenience-features:InstantCommand>` "
"even more succinctly."
msgstr ""
"Observe también que el comando anterior llama al método del subsistema una "
"vez desde la inicialización, y luego finaliza inmediatamente (ya que "
"``isFinished()`` simplemente devuelve verdadero). Esto es típico de los "
"comandos que alternan los estados de los subsistemas y, de hecho, la "
"biblioteca basada en comandos incluye código para hacer :ref: `comandos como"
" este <docs/software/commandbased/convenience-features:InstantCommand>` aún "
"más sucintamente."

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:96
msgid ""
"What about a more complicated case? Below is a drive command, from the same "
"example project:"
msgstr ""
"¿Qué tal un caso más complicado? A continuación se muestra un comando de "
"unidad, del mismo proyecto de ejemplo:"

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:124
msgid ""
"Notice that this command does not override ``isFinished()``, and thus will "
"never end; this is the norm for commands that are intended to be used as "
"default commands (and, as can be guessed, the library includes tools to make"
" :ref:`this kind of command <docs/software/commandbased/convenience-"
"features:RunCommand>` easier to write, too!)."
msgstr ""
"Tenga en cuenta que este comando no anula ``isFinished()`` y, por lo tanto, "
"nunca terminará; esta es la norma para los comandos que están destinados a "
"ser utilizados como comandos predeterminados (y, como se puede adivinar, ¡la"
" biblioteca incluye herramientas para hacer :ref: `este tipo de comando "
"<docs/software/commandbased/convenience-features:RunCommand>` más fácil de "
"escribir también!)."
